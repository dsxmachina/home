cmake_minimum_required (VERSION 3.9.4)
set(CMAKE_CUDA_COMPILER /opt/cuda/bin/nvcc)

project (xPROJECTNAMEx LANGUAGES CXX CUDA)
add_executable(xPROJECTNAMEx xPROJECTNAMEx.cpp main.cpp)

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

set(CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES /usr/lib /opt/cuda/lib64 ${CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES})
set(CMAKE_CXX_FLAGS "-Wall -Wextra")
set(CMAKE_CXX_FLAGS_DEBUG "-g -O0")
set(CMAKE_CXX_FLAGS_RELEASE "-O3")

find_package(PkgConfig)
pkg_check_modules(LIBCONFIG libconfig REQUIRED)
pkg_check_modules(LIBCONFIG_PLUSPLUS libconfig++ REQUIRED)
pkg_check_modules(OPENCV opencv REQUIRED)

if (CMAKE_SIZEOF_VOID_P STREQUAL "8")
  if (WIN32)
    set (LIB_ARCH_SUFFIX "/x64")
  elseif (APPLE)
    set (LIB_ARCH_SUFFIX "")
  else ()
    set (LIB_ARCH_SUFFIX "64")
  endif()
else()
  if (WIN32)
    set (LIB_ARCH_SUFFIX "/Win32")
  else()
    set (LIB_ARCH_SUFFIX "")
  endif()
endif()

if (DEFINED ENV{CUDA_HOME})
  set(CUDA_HOME "$ENV{CUDA_HOME}")
  set(CUDA_HOME "$ENV{CUDA_HOME}" CACHE PATH "Path to CUDA Toolkit.")
elseif (NOT DEFINED CUDA_HOME)
  get_filename_component(CUDA_HOME "${CMAKE_CUDA_COMPILER}" PATH)
  get_filename_component(CUDA_HOME "${CUDA_HOME}/.." ABSOLUTE)
  set(CUDA_HOME "${CUDA_HOME}" CACHE PATH "Path to CUDA Toolkit.")
endif()
set(CUDA_LIB_SEARCH_PATH "${CUDA_HOME}/lib${LIB_ARCH_SUFFIX}")
### Find CUDA libs/tools
find_library(CUDA_LIB cuda ${CUDA_LIB_SEARCH_PATH})
if(NOT CUDA_LIB)
  message(FATAL_ERROR "Unable to locate CUDA library/framework")
endif()
find_library(CUDA_RT_LIB cudart ${CUDA_LIB_SEARCH_PATH})
if(NOT CUDA_RT_LIB)
  message(FATAL_ERROR "Unable to locate CUDA runtime library")
endif()

find_file(CUDA_H cuda.h PATHS "${CUDA_HOME}" "${CUDA_HOME}/include" /opt/cuda/include)
if(CUDA_H)
  get_filename_component(CUDA_INCLUDE_DIR ${CUDA_H} PATH)
  include_directories(${CUDA_INCLUDE_DIR})
else()
  message(FATAL_ERROR "Unable to locate cuda.h")
endif()
message(STATUS "Using cuda header: ${CUDA_H}")


#if (APPLE OR UNIX)
#  set_target_properties(xPROJECTNAMEx PROPERTIES
#    LINK_FLAGS "-Wl,-rpath,${CUDA_RPATH}")
#endif()

include_directories(${OPENCV_INCLUDE_DIRS} /usr/include /opt/cuda/targets/x86_64/include)

# LTO
include(CheckIPOSupported)
check_ipo_supported(RESULT supported OUTPUT error)

if(supported)
    message(STATUS "IPO/LTO enabled")
    set_property(TARGET xPROJECTNAMEx PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
else()
    message(STATUS "IPO/LTO not supported: <${error}>")
endif()
